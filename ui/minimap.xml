<Ui xmlns="http://www.blizzard.com/wow/ui/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.blizzard.com/wow/ui/ ..\..\FrameXML\UI.xsd">
<!--
	Â© Justin Snelgrove
	(C) 2008-2011 Rabbit <rabbit.magtheridon@gmail.com>

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
	<Button name="XRPMinimapBase" movable="true" virtual="true">
		<Size x="31" y="31"/>
		<Layers>
			<Layer level="BACKGROUND">
				<Texture parentKey="icon" file="Interface\Icons\INV_Misc_QuestionMark">
					<Size x="20" y="20"/>
					<Anchors>
						<Anchor point="TOPLEFT" x="6" y="-5"/>
					</Anchors>
				</Texture>
			</Layer>
			<Layer level="ARTWORK">
				<Texture parentKey="dim" hidden="true">
					<Size x="20" y="20"/>
					<Anchors>
						<Anchor point="TOPLEFT" x="6" y="-5"/>
					</Anchors>
					<Color r="0" g="0" b="0" a="0.4"/>
				</Texture>
			</Layer>
			<Layer level="OVERLAY">
				<Texture file="Interface\Minimap\MiniMap-TrackingBorder">
					<Size x="53" y="53"/>
					<Anchors>
						<Anchor point="TOPLEFT"/>
					</Anchors>
				</Texture>
			</Layer>
		</Layers>
		<HighlightTexture alphaMode="ADD" file="Interface\Minimap\UI-Minimap-ZoomButton-Highlight"/>
		<Scripts>
			<OnMouseDown>
				self.dim:Show()
			</OnMouseDown>
			<OnMouseUp>
				self.dim:Hide()
			</OnMouseUp>
			<OnEnter>
				if motion and not self.settings.hidett then
					self:ShowTooltip()
				end
			</OnEnter>
			<OnLeave>
				if not self.settings.hidett then
					GameTooltip:Hide()
				end
				self.dim:Hide()
			</OnLeave>
		</Scripts>
		<Frames>
			<Button name="$parentMenu" parentKey="Menu" hidden="true" inherits="UIDropDownMenuTemplate">
				<KeyValues>
					<KeyValue key="initialize" value="EasyMenu_Initialize" type="global"/>
					<KeyValue key="displayMode" value="MENU"/>
					<KeyValue key="point" value="TOPRIGHT"/>
					<KeyValue key="relativePoint" value="BOTTOMRIGHT"/>
				</KeyValues>
			</Button>
		</Frames>
	</Button>
	<Button name="XRPMinimap" inherits="XRPMinimapBase" virtual="true">
		<Scripts>
			<OnDragStart>
				self:LockHighlight()
				self:SetScript("OnUpdate", self.OnUpdateHandler)
			</OnDragStart>
			<OnDragStop>
				self:SetScript("OnUpdate", nil)
				self:UnlockHighlight()
			</OnDragStop>
			<OnLoad><![CDATA[
				self:RegisterForClicks("anyUp")
				self:SetDontSavePosition()
				self:RegisterForDrag("LeftButton")
				self:SetClampedToScreen(false)
				self:SetFrameLevel(8)
				do
					local minimapShapes = {
						["ROUND"] = { true, true, true, true },
						["SQUARE"] = { false, false, false, false },
						["CORNER-TOPLEFT"] = { false, false, false, true },
						["CORNER-TOPRIGHT"] = { false, false, true, false },
						["CORNER-BOTTOMLEFT"] = { false, true, false, false },
						["CORNER-BOTTOMRIGHT"] = { true, false, false, false },
						["SIDE-LEFT"] = { false, true, false, true },
						["SIDE-RIGHT"] = { true, false, true, false },
						["SIDE-TOP"] = { false, false, true, true },
						["SIDE-BOTTOM"] = { true, true, false, false },
						["TRICORNER-TOPLEFT"] = { false, true, true, true },
						["TRICORNER-TOPRIGHT"] = { true, false, true, true },
						["TRICORNER-BOTTOMLEFT"] = { true, true, false, true },
						["TRICORNER-BOTTOMRIGHT"] = { true, true, true, false },
					}
					function self:UpdatePosition()
						local angle = math.rad(self.settings.angle)
						local x, y, q = math.cos(angle), math.sin(angle), 1
						if x < 0 then q = q + 1 end
						if y > 0 then q = q + 2 end
						if minimapShapes[GetMinimapShape and GetMinimapShape() or "ROUND"][q] then
							x, y = x*80, y*80
						else
							-- 103.13708498985 = math.sqrt(2*(80)^2)-10
							x = math.max(-80, math.min(x*103.13708498985, 80))
							y = math.max(-80, math.min(y*103.13708498985, 80))
						end
						self:ClearAllPoints()
						self:SetPoint("CENTER", Minimap, "CENTER", x, y)
					end
				end
				function self:OnUpdateHandler()
					local mx, my = Minimap:GetCenter()
					local px, py = GetCursorPosition()
					local scale = Minimap:GetEffectiveScale()
					px, py = px / scale, py / scale
					self.settings.angle = math.deg(math.atan2(py - my, px - mx)) % 360
					self:UpdatePosition()
				end
			]]></OnLoad>
		</Scripts>
	</Button>
	<Button name="XRPButton" inherits="XRPMinimapBase" virtual="true">
		<Scripts>
			<OnDragStart>
				if IsShiftKeyDown() then
					self:LockHighlight()
					self:StartMoving()
					self.moving = true
				end
			</OnDragStart>
			<OnDragStop>
				if self.moving then
					self:StopMovingOrSizing()
					self.settings.point, self.settings.x, self.settings.y = select(3, self:GetPoint())
					self:UnlockHighlight()
					self.moving = nil
				end
			</OnDragStop>
			<OnLoad>
				self:RegisterForClicks("anyUp")
				self:SetDontSavePosition()
				self:RegisterForDrag("RightButton")
				self:SetClampedToScreen(true)
				self:SetFrameLevel(8)
				function self:UpdatePosition()
					self:ClearAllPoints()
					self:SetPoint(self.settings.point, self:GetParent(), self.settings.point, self.settings.x, self.settings.y)
				end
			</OnLoad>
		</Scripts>
	</Button>
	<Script file="minimap.lua"/>
</Ui>
