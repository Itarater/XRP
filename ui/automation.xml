<Ui xmlns="http://www.blizzard.com/wow/ui/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.blizzard.com/wow/ui/ ..\..\FrameXML\UI.xsd">
<!--
	Â© Justin Snelgrove

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
	<!-- Here there be dragons. XML dragons, the most dangerous sort. -->
	<!-- It's dangerous to go alone, take a syntax highlighter. -->
	<!-- No, seriously, though. This is the easiest way to get a good UI. -->
	<Frame name="XRPAutomationTemplate" inherits="ButtonFrameTemplate" hidden="true" virtual="true">
		<Size x="300" y="225"/>
		<Layers>
			<Layer level="OVERLAY">
				<!-- Warning -->
				<FontString parentKey="Warning" inherits="GameFontRedSmall" maxLines="3">
					<Size x="200"/>
					<Anchors>
						<Anchor point="TOP" relativePoint="TOP" x="24" y="-27"/>
					</Anchors>
				</FontString>
				<!-- Form Label -->
				<FontString parentKey="FormLabel" inherits="GameFontNormalSmall" text="Form/set selection:">
					<Anchors>
						<Anchor point="TOPLEFT" relativeKey="$parent.Inset" relativePoint="TOPLEFT" x="12" y="-8"/>
					</Anchors>
				</FontString>
				<!-- Profile Label -->
				<FontString parentKey="ProfileLabel" inherits="GameFontNormalSmall" text="Profile selection:">
					<Anchors>
						<Anchor point="TOPLEFT" relativeKey="$parent.FormLabel" relativePoint="BOTTOMLEFT" x="0" y="-35"/>
					</Anchors>
				</FontString>
				<!-- Status -->
				<FontString parentKey="Status" inherits="GameFontGreenSmall" maxLines="3" text="Select a form/set from the top menu, assign a profile to it in the bottom menu, and click Accept to save.">
					<Size x="250"/>
					<Anchors>
						<Anchor point="TOP" relativeKey="$parent.Inset" relativePoint="TOP" x="0" y="-97"/>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
		<Frames>
			<!-- Form -->
			<Button name="$parentForm" parentKey="Form" inherits="UIDropDownMenuTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativeKey="$parent.FormLabel" relativePoint="BOTTOMLEFT" x="-22" y="0"/>
				</Anchors>
				<Scripts>
					<OnLoad>
						UIDropDownMenu_SetWidth(self, 260, 0)
						self.Text = _G[self:GetName().."Text"]
						function self:SetText(value)
							UIDropDownMenu_Initialize(self, self.initialize, nil, nil, self.forms)
							self:SetValue(value)
						end
						function self:SetValue(value)
							UIDropDownMenu_SetSelectedValue(self, value)
							self.Text:SetText(self:MakeWords(value))
							local parent = self:GetParent()
							parent.Profile:SetText(xrpSaved.auto[value] or "")
							parent:CheckButtons()
						end
						function self:GetText()
							return UIDropDownMenu_GetSelectedValue(self)
						end
					</OnLoad>
				</Scripts>
			</Button>
			<!-- Profile -->
			<Button name="$parentProfile" parentKey="Profile" inherits="UIDropDownMenuTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativeKey="$parent.ProfileLabel" relativePoint="BOTTOMLEFT" x="-22" y="0"/>
				</Anchors>
				<Scripts>
					<OnLoad>
						UIDropDownMenu_SetWidth(self, 260, 0)
						function self:SetText(value)
							UIDropDownMenu_Initialize(self, self.initialize)
							UIDropDownMenu_SetSelectedValue(self, value)
							self:GetParent():CheckButtons()
						end
						function self:GetText()
							return UIDropDownMenu_GetSelectedValue(self)
						end
					</OnLoad>
				</Scripts>
			</Button>
			<!-- Accept -->
			<Button parentKey="Accept" inherits="UIPanelButtonTemplate" text="ACCEPT">
				<Size x="96" y="21"/>
				<Anchors>
					<Anchor point="BOTTOMLEFT" relativePoint="BOTTOMLEFT" x="26" y="4"/>
				</Anchors>
				<Scripts>
					<OnClick>
						self:GetParent():AcceptForm()
					</OnClick>
				</Scripts>
			</Button>
			<!-- Cancel -->
			<Button parentKey="Cancel" inherits="UIPanelButtonTemplate" text="CANCEL">
				<Size x="96" y="21"/>
				<Anchors>
					<Anchor point="BOTTOMRIGHT" relativePoint="BOTTOMRIGHT" x="-26" y="4"/>
				</Anchors>
				<Scripts>
					<OnClick>
						local parent = self:GetParent()
						parent.Form:SetText(parent.Form:GetText())
					</OnClick>
				</Scripts>
			</Button>
		</Frames>
		<Attributes>
			<Attribute name="UIPanelLayout-defined" type="boolean" value="true"/>
			<Attribute name="UIPanelLayout-enabled" type="boolean" value="true"/>
			<Attribute name="UIPanelLayout-area" type="string" value="right"/>
			<Attribute name="UIPanelLayout-pushable" type="number" value="5"/>
			<Attribute name="UIPanelLayout-whileDead" type="boolean" value="true"/>
		</Attributes>
		<Scripts>
			<OnLoad>
				self.TitleText:SetText("Profile Automation")
				do
					local function infofunc(entry, arg1, arg2, checked)
						if not checked then
							UIDropDownMenu_SetSelectedValue(self.Profile, entry.value)
							self:CheckButtons()
						end
					end

					function self.Profile:initialize(level, menuList)
						do
							local info = UIDropDownMenu_CreateInfo()
							info.text = "None"
							info.value = ""
							info.func = infofunc
							UIDropDownMenu_AddButton(info)
						end
						for _, value in ipairs(xrp.profiles:List()) do
							local info = UIDropDownMenu_CreateInfo()
							info.text = value
							info.value = value
							info.func = infofunc
							UIDropDownMenu_AddButton(info)
						end
					end
				end

				local GR, GC = select(2, UnitRace("player")), select(2, UnitClassBase("player"))

				local formNames = {
					["DEFAULT"] = "No equipment set",
					["CAT"] = "Cat Form",
					["BEAR"] = "Bear Form",
					["MOONKIN"] = "Moonkin Form",
					["ASTRAL"] = "Astral Form",
					["AQUATIC"] = "Travel Form (Aquatic)",
					["TRAVEL"] = "Travel Form (Land)",
					["FLIGHT"] = "Travel Form (Flight)",
					["TREANT"] = "Treant Form",
					["SHADOWFORM"] = "Shadowform",
					["GHOSTWOLF"] = "Ghost Wolf",
					["HUMAN"] = "Human",
					["DEFAULT\30SHADOWFORM"] = "Shadowform (Worgen)",
					["HUMAN\30SHADOWFORM"] = "Shadowform (Human)",
				}
				if GR == "Worgen" then
					formNames["DEFAULT"] = "Worgen"
				elseif GC == "PRIEST" then
					formNames["DEFAULT"] = "Standard"
				elseif GC == "DRUID" or GC == "SHAMAN" then
					formNames["DEFAULT"] = "Humanoid"
				end

				local hasRace = GR == "Worgen"
				local hasClass = GC == "DRUID" or GC == "PRIEST" or GC == "SHAMAN"

				function self.Form:MakeWords(text)
					local form, equipment = text:match("^([^\29]+)\29?([^\29]*)$")
					if not equipment or equipment == "" then
						return formNames[form]
					elseif not hasRace and not hasClass then
						return ("%s"):format(equipment)
					else
						return ("%s: %s"):format(formNames[form], equipment)
					end
				end

				function self:AcceptForm()
					local form, profile = self.Form:GetText(), self.Profile:GetText()
					profile = profile ~= "" and profile or nil
					xrpSaved.auto[form] = profile
					if profile then
						self.Status:SetFormattedText("The profile %s has been assigned to the %s form/set.", profile, self.Form:MakeWords(form))
					else
						self.Status:SetFormattedText("The assigned profile for the %s form/set has been removed.", self.Form:MakeWords(form))
					end
					self:CheckButtons()
					xrp:RecheckForm()
				end

				function self:CheckButtons()
					local form, profile = self.Form:GetText(), self.Profile:GetText()
					local changes = xrpSaved.auto[form] ~= (profile ~= "" and profile or nil)
					if next(xrpSaved.auto) and not xrpSaved.auto["DEFAULT"] then
						self.Warning:Show()
						self.Warning:SetFormattedText("You do not have a default/fallback profile. You should set a profile for \"%s\" to fix this.", formNames["DEFAULT"])
					else
						self.Warning:Hide()
					end
					self.Accept:SetEnabled(changes)
					self.Cancel:SetEnabled(changes)
				end

				local equipsets = {}
				local update_EquipSets
				do
					local function equipsets_Click(entry, arg1, arg2, checked)
						if not checked then
							local value = (UIDROPDOWNMENU_MENU_VALUE or "default"):upper()..entry.value
							self.Form:SetValue(value)
						end
						CloseDropDownMenus()
					end

					local function equipsets_Check(entry)
						local value = (UIDROPDOWNMENU_MENU_VALUE or "default"):upper()..entry.value
						return self.Form:GetText() == value
					end

					local noset = not hasRace and not hasClass and { text = formNames["DEFAULT"], value = "", checked = equipsets_Check, func = equipsets_Click, } or nil

					function update_EquipSets()
						wipe(equipsets) -- Keep table reference the same.
						equipsets[#equipsets + 1] = noset
						local numsets = GetNumEquipmentSets()
						if numsets and numsets > 0 then
							for i = 1, numsets do
								local name = GetEquipmentSetInfo(i)
								equipsets[#equipsets + 1] = {
									text = name,
									value = "\29"..name,
									checked = equipsets_Check,
									func = equipsets_Click,
								}
							end
						elseif not noset then
							equipsets[#equipsets + 1]  = {
								text = "No equipment sets",
								disabled = true,
							}
						end
					end
				end

				do
					-- This uses lower-case values (with string.upper) to work
					-- around a bug which causes our checked function to be
					-- overwritten if setting the raw value.
					local function forms_Click(entry, arg1, arg2, checked)
						if not checked then
							self.Form:SetValue(entry.value:upper())
						end
						CloseDropDownMenus()
					end

					local function forms_Check(entry)
						return self.Form:GetText() == entry.value:upper()
					end

					if GR == "Worgen" then
						if GC == "DRUID" then
							self.Form.forms = {
								{ -- Worgen
									text = formNames["DEFAULT"],
									value = "default",
									func = forms_Click,
									checked = forms_Check,
									hasArrow = true,
									menuList = equipsets,
								},
								{ -- Human
									text = formNames["HUMAN"],
									value = "human",
									func = forms_Click,
									checked = forms_Check,
									hasArrow = true,
									menuList = equipsets,
								},
								{ -- Cat
									text = formNames["CAT"],
									value = "cat",
									func = forms_Click,
									checked = forms_Check,
								},
								{ -- Bear
									text = formNames["BEAR"],
									value = "bear",
									func = forms_Click,
									checked = forms_Check,
								},
								{ -- Moonkin
									text = formNames["MOONKIN"],
									value = "moonkin",
									func = forms_Click,
									checked = forms_Check,
								},
								{ -- Astral
									text = formNames["ASTRAL"],
									value = "astral",
									func = forms_Click,
									checked = forms_Check,
									hasArrow = true,
									menuList = equipsets,
								},
								{ -- Travel
									text = formNames["TRAVEL"],
									value = "travel",
									func = forms_Click,
									checked = forms_Check,
								},
								{ -- Flight
									text = formNames["FLIGHT"],
									value = "flight",
									func = forms_Click,
									checked = forms_Check,
								},
								{ -- Aquatic
									text = formNames["AQUATIC"],
									value = "aquatic",
									func = forms_Click,
									checked = forms_Check,
								},
								{ -- Treant
									text = formNames["TREANT"],
									value = "treant",
									func = forms_Click,
									checked = forms_Check,
								},
							}
						elseif GC == "PRIEST" then
							self.Form.forms = {
								{ -- Worgen
									text = formNames["DEFAULT"],
									value = "default",
									func = forms_Click,
									checked = forms_Check,
									hasArrow = true,
									menuList = equipsets,
								},
								{ -- Human
									text = formNames["HUMAN"],
									value = "human",
									func = forms_Click,
									checked = forms_Check,
									hasArrow = true,
									menuList = equipsets,
								},
								{ -- Shadowform (Worgen)
									text = formNames["DEFAULT\30SHADOWFORM"],
									value = "default\30shadowform",
									func = forms_Click,
									checked = forms_Check,
									hasArrow = true,
									menuList = equipsets,
								},
								{ -- Shadowform (Human)
									text = formNames["HUMAN\30SHADOWFORM"],
									value = "human\30shadowform",
									func = forms_Click,
									checked = forms_Check,
									hasArrow = true,
									menuList = equipsets,
								},
							}
						else
							self.Form.forms = {
								{ -- Worgen
									text = formNames["DEFAULT"],
									value = "default",
									func = forms_Click,
									checked = forms_Check,
									hasArrow = true,
									menuList = equipsets,
								},
								{ -- Human
									text = formNames["HUMAN"],
									value = "human",
									func = forms_Click,
									checked = forms_Check,
									hasArrow = true,
									menuList = equipsets,
								},
							}
						end
					else
						if GR == "DRUID" then
							self.Form.forms = {
								{ -- Humanoid
									text = formNames["DEFAULT"],
									value = "default",
									func = forms_Click,
									checked = forms_Check,
									hasArrow = true,
									menuList = equipsets,
								},
								{ -- Cat
									text = formNames["CAT"],
									value = "cat",
									func = forms_Click,
									checked = forms_Check,
								},
								{ -- Bear
									text = formNames["BEAR"],
									value = "bear",
									func = forms_Click,
									checked = forms_Check,
								},
								{ -- Moonkin
									text = formNames["MOONKIN"],
									value = "moonkin",
									func = forms_Click,
									checked = forms_Check,
								},
								{ -- Astral
									text = formNames["ASTRAL"],
									value = "astral",
									func = forms_Click,
									checked = forms_Check,
									hasArrow = true,
									menuList = equipsets,
								},
								{ -- Travel
									text = formNames["TRAVEL"],
									value = "travel",
									func = forms_Click,
									checked = forms_Check,
								},
								{ -- Flight
									text = formNames["FLIGHT"],
									value = "flight",
									func = forms_Click,
									checked = forms_Check,
								},
								{ -- Aquatic
									text = formNames["AQUATIC"],
									value = "aquatic",
									func = forms_Click,
									checked = forms_Check,
								},
								{ -- Treant
									text = formNames["TREANT"],
									value = "treant",
									func = forms_Click,
									checked = forms_Check,
								}
							}
						elseif GC == "PRIEST" then
							self.Form.forms = {
								{ -- Standard
									text = formNames["DEFAULT"],
									value = "default",
									func = forms_Click,
									checked = forms_Check,
									hasArrow = true,
									menuList = equipsets,
								},
								{ -- Shadowform
									text = formNames["SHADOWFORM"],
									value = "shadowform",
									func = forms_Click,
									checked = forms_Check,
									hasArrow = true,
									menuList = equipsets,
								},
							}
						elseif GC == "SHAMAN" then
							self.Form.forms = {
								{ -- Humanoid
									text = formNames["DEFAULT"],
									value = "default",
									func = forms_Click,
									checked = forms_Check,
									hasArrow = true,
									menuList = equipsets,
								},
								{ -- Ghost Wolf
									text = formNames["GHOSTWOLF"],
									value = "ghostwolf",
									func = forms_Click,
									checked = forms_Check,
								},
							}
						else
							self.Form.forms = equipsets
						end
					end
				end

				_G[self.Form:GetName().."Button"]:SetScript("OnClick", function(button)
					update_EquipSets()
					ToggleDropDownMenu(nil, nil, button:GetParent(), nil, nil, nil, self.Form.forms)
					PlaySound("igMainMenuOptionCheckBoxOn")
				end)

				self.Form.initialize = EasyMenu_Initialize
			</OnLoad>
			<OnShow>
				SetPortraitTexture(self.portrait, "player")
				self.Form:SetText("DEFAULT")
				PlaySound("igCharacterInfoOpen")
			</OnShow>
			<OnHide>
				PlaySound("igCharacterInfoClose")
			</OnHide>
		</Scripts>
	</Frame>
</Ui>
